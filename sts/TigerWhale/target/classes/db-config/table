--계정 project 생성, 권한부여-----------------

create user project identified by project; --아이디 project 비밀번호 project인 접속가능한 user를 생성한다
grant connect, resource, dba to project; -- project라는 user에게 자원생성 

-----------------------------------------

-- 테이블 목록
-- 추가된 테이블이 또는 상세내용이 적혀있지 않은 테이블에는 테이블 사용자가 직접 수정해주세요 = > 마지막에 erd관계도 수정과 , 테이블 생성문 가독성을 높이기위함

1. userBoard
2.  mentorBoard
3. careerBoard
4. detailBoard
5. interestBoard
6. mainBoard
7. V_R_Board(추천,조회)
8. Y_M_Board (게시글 작성자의 허용한시간 관련)
9. replyBoard
10. categoryBoard
11. IMGBoard
12. UserIMGBoarsd
13. textBoarsd
14.UserIMGBoarsd

 

-------------1. userBoard----------------------------------
-- 회원가입시 데이터를 저장하게되는 테이블입니다

CREATE TABLE userBoard
(
    user_ID VARCHAR2(40) PRIMARY KEY, --아이디
    user_PW VARCHAR2(40) NOT NULL, -- 비밀번호
    userAdress VARCHAR2(100)NOT NULL, -- 주소
    userPhoneNumber VARCHAR2(60)NOT NULL, --핸드폰 번호
    userEmail1 VARCHAR2(50)NOT NULL, -- 이메일 앞부분 ex)aaaaa@naver.com
    userEmail2 VARCHAR2(50)NOT NULL, -- 이메일 뒷부분
    userGender VARCHAR2(6)NOT NULL, -- 성별 
    buyScore_AVG NUMBER(3), -- 회원이 구매를하면서 판매자에게 받게된 평점의 총합 ( 변수명이 total,sum같은것이 아닌이유는 추후수정으로 오류발생을 피하기위해서 입니다) ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다 
    la NUMBER, -- 회원 주소의 위도값 ( 카카오맵에 사용하는 값입니다 )
    ma NUMBER, -- 회원 주소의  경도값 ( 카카오맵에 사용하는 값입니다 )
    scoreCount NUMBER default 0--  회원이 평가를 받은 전체 횟수입니다. ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다
);

-------------------------------------------------------------------


--------------2. mentorBoard -------------------------------------
-- 회원이 판매자로서 활동하기 위해 데이터가 저장되는 테이블 입니다.

CREATE TABLE mentorBoard
(
    user_ID VARCHAR2(20) NOT NULL, --회원의 아이디
    accountNum VARCHAR2(20)UNIQUE NOT NULL, - 회원의 계좌번호 ( 결제를했을경우 해당계좌로 금액을 받습니다)
    sellScore_AVG number(3), --회원이 판매를하면서 구매자에게 받은 평점의 총합 ( 변수명이 total,sum같은것이 아닌이유는 추후수정으로 오류발생을 피하기위해서 입니다) ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다
    scoreCount NUMBER default 0 -- 회원이 평가를 받은 전체 횟수 입니다 ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다 )
);

-------------------------------------------------------------------


-----------3. careerBoard -----------------------------------
-- 회원이 판매자로서 자신의 경력을 올리고싶을때 그경력을 저장하는 테이블입니다.

CREATE TABLE careerBoard
(
    user_ID VARCHAR2(20) NOT NULL, --회원의 아이디
    careerList VARCHAR2(100) UNIQUE NOT NULL -- 회원의 경력사항입니다 .
);

-------------------------------------------------------------------



----------- 4 . detailBoard -----------------
-- 회원의 결제내역 테이블입니다 / 구매내역 판매내역 모두 확인가능합니다.

CREATE TABLE detailBoard
(
    orderNum NUMBER(10) PRIMARY KEY, --주문 번호 (시퀀스값으로 값이 할당됩니다.)
    sell_ID VARCHAR2(10) NOT NULL, --해당 bno에서 일어난 거래의 구매아이디
    buy_ID VARCHAR2(20) NOT NULL, --해당 bno에서 일어난 거래의 판매아이디
    bno NUMBER(10) UNIQUE NOT NULL,
    price NUMBER(10) NOT NULL, --판매가
    sellScore NUMBER(3), --구매자가 판매자에게 주는평점
    buyScore NUMBER(3)-- 판매자가 구매자에게 주는평점
);

-- orderNum에 적용되는 시퀀스 입니다
create SEQUENCE detailBoard_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
--------------------------------------------------------------------

 

-----------------5. interestBoard -----------------------
-- 회원의 관심 카테고리를 저장한 테이블 입니다

CREATE TABLE interestBoard
(
    user_ID VARCHAR2(20) NOT NULL, --아이디
    C_code NUMBER(5) NOT NULL --카테고리의 키번호 -- 카테고리 번호 (해당카테고리 번호를통해 대분류 중분류 소분류 의 값이 무엇인지 알수 있습니다)
);

--------------------------------------------------------------------


----------------------- 6. mainBoard ------------------------------------
-- 게시글 입니다

CREATE TABLE mainBoard
(
    bno NUMBER(10) PRIMARY KEY, -- 게시글 번호
    user_ID VARCHAR2(4000) NOT NULL, -- 게시글 작성자 아이디
    C_code NUMBER(5) NOT NULL, -- 게시글의 카테고리 유형 (해당카테고리 번호를통해 대분류 중분류 소분류 의 값이 무엇인지 알수 있습니다)
    boardType VARCHAR2(4000) NOT NULL, -- 게시글의 종류를 확인함 입력값은'구매','판매' 
    title VARCHAR2(4000) NOT NULL, -- 게시글의 제목
    text VARCHAR2(4000) NOT NULL, -- 게시글의 내용
    price NUMBER(10) NOT NULL, -- 게시글의 판매 금액
    M_registDate DATE DEFAULT SYSDATE, --게시글등록 시간
    M_updateDate DATE DEFAULT SYSDATE -- 게시글수정 시간
);

--bno에 사용되는 시퀀스 입니다
create SEQUENCE MainBoard_SEQ INCREMENT BY 1 START WITH 1 NOCACHE; -- 게시글번호 시퀀스

-------------------------------------------------------------------------


-------------------------- 7. V_R_Board(추천,조회) ---------------------------------
--게시글의 추천수/조회수를 기록한 테이블입니다
--Trigger 생성 조건 때문에 불필요한 칼럼이 많은상태입니다. 추천수,조회수 mainBoard로 합치면 트리거랑함께 삭제 가능한 테이블 입니다 ( 처음에 오류날줄알고 mainBoard의 수정없이 테이블을 하나더만들었씁니다) 

CREATE TABLE V_R_Board
(
    bno NUMBER(10) , -- 
    user_ID VARCHAR2(20) NOT NULL,
    C_code NUMBER(5) NOT NULL,
    boardType VARCHAR(6) NOT NULL, 
    title VARCHAR2(30) NOT NULL,
    text VARCHAR2(500) NOT NULL,
    price NUMBER(10) NOT NULL,
    M_registDate DATE DEFAULT SYSDATE, --
    M_updateDate DATE DEFAULT SYSDATE, -- bno부터 여기까지 mainBoard와 값이 동일합니다.
    recomendNum NUMBER(10) DEFAULT 0, -- 게시글 추천수
    viewNum NUMBER(10) DEFAULT 0 -- 게시글 조회수
);

					======= mainBoard에 적용시키는 trigger코드 ===========
					=== V_R_Board 생성시 컴파일 + commit; 필수==
					
					create or replace trigger trigger_Backup_mainBoard
					    after insert
					    on mainBoard
					    FOR EACH ROW
					BEGIN
					
					    INSERT INTO 
					                v_r_Board(
					                            bno,
					                            user_Id,
					                            C_code,
					                            BOARDTYPE,
					                            TITLE,
					                            TEXT,
					                            PRICE,
					                            M_registDate,
					                            M_updateDate
					                          ) 
					        VALUES( 
					                :NEW.bno,
					                :NEW.user_ID,
					                :NEW.C_code,
					                :NEW.BOARDTYPE,
					                :NEW.TITLE,
					                :NEW.TEXT,
					                :NEW.PRICE,
					                :NEW.M_registDate,
					                :NEW.M_updateDate
					               );
					end trigger_Backup_mainBoard;
					
					
					
					====삭제트리거 =======
					create or replace trigger trigger_delete_mainBoard
					    after delete
					    on mainBoard
					    FOR EACH ROW
					BEGIN
					    delete from v_r_Board where bno = :OLD.bno;
					commit;
					end trigger_delete_mainBoard;
					
					=======================================


--------------------------------------------------------------------------


------------------------- 8. Y_M_Board (게시글 작성자의 허용한시간 관련) -----------------------------------
-- 게시글의 작성자가 허용한 날짜와 시간대를 저장하는 테이블

CREATE TABLE Y_M_Board
(
    bno NUMBER(10) UNIQUE NOT NULL, -- 게시글 번호
    M_year1 NUMBER(4), -- 시작되는 년도를 입력받음
    M_year2 NUMBER(4),-- 끝나는 년도를 입력받음
    M_month1 NUMBER(2), -- 시작되는 달을 입력받음 
    M_month2 NUMBER(2) -- 끝나는 달을 입력받음
);

------------------------ 9. replyBoard ------------------------------------- 
--댓글과 관련된 정보가 저장되는 테이블 입니다

CREATE TABLE replyBoard
(
    user_ID VARCHAR2(20) NOT NULL, -- 댓글 작성자 아이디
    bno NUMBER(10) NOT NULL, -- 댓글달린 게시글의 번호
    orderNum NUMBER(10) NOT NULL, --거래내역의 고유번호 (댓글과 거래내역 테이블의 외래키 역할을 합니다)
    reply VARCHAR(200) NOT NULL, -- 답글 내용
    R_replyDate DATE DEFAULT SYSDATE, -- 답글생성 시간
    R_updateDate DATE DEFAULT SYSDATE -- 답글수정 시간
);

------------------------ 10.categoryBoard ----------------------------------
--카테고리의 대분류 중분류 소분를 하나의 번호로 저장하는 테이블

CREATE TABLE categoryBoard
(
    C_code NUMBER(5) UNIQUE NOT NULL, --해당행의 코드번호(고유값)
    middleCategory VARCHAR2(60) NOT NULL, --대분류명
    smallCategory VARCHAR2(60) NOT NULL, -- 중분류명
    bigCategory VARCHAR2(60) NOT NULL --소분류명
);

-----------------------------------------------------------------------------




------------------------------ 11. IMGBoard --------------------------------
--해당 게시글의 게시된 img파일의 이름을 저장하고 있는 테이블 입니다

create TABLE IMGBoard
(
   bno NUMBER(10) NOT NULL, --게시글 번호
   img VARCHAR2(60) -- img 파일형식이름 ( 파일을 업로드할때 사용되는 데이터입니다)
);

----------------------------------------------------------------------------

----------------------------12.UserIMGBoarsd------------------------------
-- 모름 (직접 수정 )
create TABLE UserIMGBoard
(
   bno NUMBER(10) NOT NULL,
   img VARCHAR2(60)
);

---------------------------------------------------------------------------

----------------------------13.textBoarsd------------------------------
-- 모름 (직접 수정 )
create TABLE textBoard
(
   bno NUMBER(10) NOT NULL,
   text1 VARCHAR2(500) ,
   text2 VARCHAR2(500) ,
   text3 VARCHAR2(500) 
);

--------------------------------------------------------------------------

----------------------------14.UserIMGBoarsd------------------------------
-- 모름 (직접 수정 )

create table faqBOARD(
    bno number(10) PRIMARY KEY,
    title varchar2(200) not null,
    writer varchar2(200) not null,
    content varchar2(2000) not null,
    regdate date default sysdate,
    updatedate date default sysdate
);
create SEQUENCE faqBOARD_SEQ INCREMENT BY 1 START WITH 1 nocache;

-----------------------------------------------------------------------------


